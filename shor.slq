def bitsize(n:!N) lifted {
    return ceil(log(n + 1)/log(2)) coerce !N;
}

// Single-qubit rotation about the Z axis.
def U1 (r:!ℝ, q:B) mfree {
    if q { phase(r) }
    return q;
}

def find_period[size:!N] (n:!N, a:!N, q:B^size) lifted {
    for i in [0..size) {
        mod := 0:!N;
        for j in [1..2^(size - i)) {
            mod = (mod * a) % n;
        }
    }

    return q;
}

def swap_all[n:!N] (qs:B^n) mfree:B^n {
    for i in [0..n div 2) {
      (qs[i], qs[n-i-1]) := (qs[n-i-1], qs[i]);
    }

    return qs;
}

def QFT[n:!N] (qs:B^n) mfree:B^n {
    for i in [0..n) {
        qs[i] := H(qs[i]);

        for j in [i+1..n) {
            qs[j] := U1(π/2^(j - i), qs[j]);
        }
    }

    return swap_all(qs);
}

// Shor's Algorithm:
// https://tsmatz.wordpress.com/2019/06/04/quantum-integer-factorization-by-shor-period-finding-algorithm/
def shor(n:!N, a:!N) {
    size := bitsize(n) * 2;
    q := vector(size, false):B[];

    // |q> -> H -> |q>
    for i in [0..size) {
        q[i] := H(q[i]);
    }

    // |x⟩|0(=y)⟩ -> |x⟩ |a^x mod N⟩
    return (n, a, q);
}

def main(){
    qs := vector(2, 1:B);
    return QFT(dup(qs));
}

def bitsize(n:!N) lifted {
    return ceil(log(n + 1)/log(2)) coerce !N;
}

def test_bitsize() {
    if bitsize(0) != 0 { print("F n=0") };
    if bitsize(1) != 1 { print("F n=1") };
    if bitsize(3) != 2 { print("F n=3") };
    if bitsize(7) != 3 { print("F n=7") };
    if bitsize(8) != 4 { print("F n=8") };
}

// Shor's Algorithm:
// https://tsmatz.wordpress.com/2019/06/04/quantum-integer-factorization-by-shor-period-finding-algorithm/
def shor(n:!N, a:!N) {
    size := bitsize(n) * 2;
    q := vector(size, false):B[];
    // |q> -> H -> |q>
    for i in [0..size) {
        q[i] := H(q[i]);
    }
    return (n, a, q);
}

def main(){
  test_bitsize();

  return shor(57, 5);
}
